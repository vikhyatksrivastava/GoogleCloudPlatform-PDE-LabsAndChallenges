==========================================================================================================================================================================================
This document have the solution for Build and Optimize Data Warehouses with BigQuery: Challenge Lab of Build and Optimize Data Warehouses with BigQuery module fro GCP PDE certification.
Please note that the value of datasets and table names could be different from what it has been porovided here.
==========================================================================================================================================================================================

Task 1: Create a table partitioned by date

CREATE OR REPLACE TABLE `<PROJECT_NAME>.covid.oxford_policy_tracker`
PARTITION BY date
OPTIONS(
partition_expiration_days=1080,
description="oxford_policy_tracker table in the COVID 19 Government Response public dataset with  an expiry time set to 90 days."
) AS
SELECT
   *
FROM
   `bigquery-public-data.covid19_govt_response.oxford_policy_tracker`
WHERE
   alpha_3_code NOT IN ('GBR', 'BRA', 'CAN','USA');

ALTER TABLE `<PROJECT_NAME>.covid.oxford_policy_tracker`
ADD COLUMN population INT64,
ADD COLUMN country_area FLOAT64,
ADD COLUMN mobility STRUCT<
   avg_retail      FLOAT64,
   avg_grocery     FLOAT64,
   avg_parks       FLOAT64,
   avg_transit     FLOAT64,
   avg_workplace   FLOAT64,
   avg_residential FLOAT64
>
==========================================================================================================================================================================================

Task 2 Populate the mobility record data

UPDATE
   `<PROJECT_NAME>.covid_data.consolidate_covid_tracker_data` t0
SET
   t0.mobility.avg_retail      = t1.avg_retail,
   t0.mobility.avg_grocery     = t1.avg_grocery,
   t0.mobility.avg_parks       = t1.avg_parks,
   t0.mobility.avg_transit     = t1.avg_transit,
   t0.mobility.avg_workplace   = t1.avg_workplace,
   t0.mobility.avg_residential = t1.avg_residential
FROM
   ( SELECT country_region, date,
      AVG(retail_and_recreation_percent_change_from_baseline) as avg_retail,
      AVG(grocery_and_pharmacy_percent_change_from_baseline)  as avg_grocery,
      AVG(parks_percent_change_from_baseline) as avg_parks,
      AVG(transit_stations_percent_change_from_baseline) as avg_transit,
      AVG(workplaces_percent_change_from_baseline) as avg_workplace,
      AVG(residential_percent_change_from_baseline)  as avg_residential
      FROM `bigquery-public-data.covid19_google_mobility.mobility_report`
      GROUP BY country_region, date
   ) AS t1
WHERE
   CONCAT(t0.country_name, t0.date) = CONCAT(t1.country_region, t1.date);

==========================================================================================================================================================================================

Task 3 Query missing data in population & country_area columns

select distinct country_name
from `<PROJECT_NAME>.covid_data.oxford_policy_tracker_worldwide`
where population is NULL 
UNION ALL
select distinct country_name
from `<PROJECT_NAME>.covid_data.oxford_policy_tracker_worldwide`
where country_area IS NULL
ORDER BY country_name;
==========================================================================================================================================================================================

Task 4 Create a new table for country population data

CREATE OR REPLACE TABLE `<PROJECT_NAME>.covid_data.pop_data_2019` AS
SELECT
  country_territory_code,
  pop_data_2019
FROM 
  `bigquery-public-data.covid19_ecdc.covid_19_geographic_distribution_worldwide`
GROUP BY
  country_territory_code,
  pop_data_2019
ORDER BY
  country_territory_code;

UPDATE
   `<PROJECT_NAME>.covid.oxford_policy_tracker` t0
SET
   population = t1.pop_data_2019
FROM
   `<PROJECT_NAME>.covid_data.pop_data_2019` t1
WHERE
   CONCAT(t0.alpha_3_code) = CONCAT(t1.country_territory_code);

UPDATE
   `<PROJECT_NAME>.covid.oxford_policy_tracker` t0
SET
   t0.country_area = t1.country_area
FROM
   `bigquery-public-data.census_bureau_international.country_names_area` t1
WHERE
   t0.country_name = t1.country_name;
==========================================================================================================================================================================================
